/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        //返回的是update之后的root
        if(root == null){
            return null;
        }
        if(root.val > key){
            //更新左树，并且拼到左边
            root.left = deleteNode(root.left, key);
        }else if(root.val < key){
            root.right = deleteNode(root.right, key);
        }else{
            //找到与key值相等的root
            if(root.right != null){
                root.val = findSuccessor(root.right);
                root.right = deleteNode(root.right, root.val);
            }else if(root.left != null){
               root.val = findPredecessor(root.left);
                root.left = deleteNode(root.left, root.val);                
            }else{
                //走到最下面了
                root = null;
            }
        }
        return root;
    }

    private int findSuccessor(TreeNode root){
        while(root.left != null){
            root = root.left;
        }
        return root.val;
    }
    private int findPredecessor(TreeNode root){
        while(root.right != null){
            root = root.right;
        }
        return root.val;
    }
}
