class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> cur = new ArrayList<>();
        Arrays.sort(nums);
        boolean[] visited = new boolean[nums.length];
        for(int i = 0; i < visited.length; i++){
            visited[i] = false;
        }
        helper(visited, cur, result, nums);
        return result;
    }
    private void helper(boolean[] visited, List<Integer> cur, List<List<Integer>> result, int[] nums){
        if(cur.size() == nums.length){
            result.add(new ArrayList<>(cur));
        }
        for(int i = 0; i < nums.length; i++){
            if(i != 0 && nums[i] == nums[i - 1]){
                if(visited[i - 1] == false){
                    continue;
                }
            }
            if(!visited[i]){
                visited[i] = true;
                cur.add(nums[i]);
                helper(visited, cur, result, nums);
                visited[i] = false;
                cur.remove(cur.size() - 1);
            }
        }
    }
}
