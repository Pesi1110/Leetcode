class Solution {
    public int search(int[] nums, int target) {
        int start = 0;
        int end = nums.length - 1;
        while(start + 1 < end){
            int mid = start + (end - start) / 2;
            if(nums[start] < nums[mid]){
                start = mid;
            }else{
                end = mid;
            }
        }
        if(nums[start] <= nums[end] && nums[0] > target){
            return -1;
        }
        if(nums[start] <= nums[end] && nums[0] <= target){
            return searchTarget(0, (nums.length - 1), nums, target);
        }
        if(nums[0] > target){
            return searchTarget(end, (nums.length - 1), nums, target);
        }
        if(nums[0] <= target){
            return searchTarget(0, start, nums, target);
        }
        return -1;
    }
    private int searchTarget(int start, int end, int[] nums, int target){
        while(start + 1 < end){
            int mid = start + (end - start) / 2;
            if(nums[mid] < target){
                start = mid;
            }else if(nums[mid] > target){
                end = mid;
            }else{return mid;}
        }
        if(nums[start] == target){
            return start;
        }
        if(nums[end] == target){
            return end;
        }
        return -1;
    }
}
