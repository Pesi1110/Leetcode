/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution {
    public Node cloneGraph(Node node) {
        if(node == null){
            return null;
        }
        Map<Node, Node> mapping = createMapping(node);
        deepCopy(mapping, node);
        return mapping.get(node);
    }
    private Map<Node, Node> createMapping(Node node){
        Set<Node> visited = new HashSet<>();
        Map<Node, Node> mapping = new HashMap<>();
        Queue<Node> queue = new LinkedList<>();
        queue.offer(node);
        visited.add(node);
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int i = 0; i < size; i++){
                Node originalNode = queue.poll();
                if(!mapping.containsKey(originalNode)){
                    Node copyNode = new Node(originalNode.val);
                    mapping.put(originalNode, copyNode);
                }
                for(Node neighbor : originalNode.neighbors){
                    if(!visited.contains(neighbor)){
                        visited.add(neighbor);
                        queue.offer(neighbor);
                    }  
                }
            }
        }
        return mapping;
    }
    private void deepCopy(Map<Node, Node> mapping, Node node){
        Queue<Node> queue = new LinkedList<>();
        Set<Node> visited = new HashSet<>();
        queue.offer(node);
        visited.add(node);
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int i = 0; i < size; i++){
                Node originalNode = queue.poll();
                for(Node originalNeighbor : originalNode.neighbors){
                    if(!visited.contains(originalNeighbor)){
                        visited.add(originalNeighbor);
                        queue.offer(originalNeighbor);
                    }
                    //加copyNeighbor不用看visited, 因为如果1是2的邻居，走到2还需要把1加入邻居
                    mapping.get(originalNode).neighbors.add(mapping.get(originalNeighbor));
                }
            }
        }
    }
}
