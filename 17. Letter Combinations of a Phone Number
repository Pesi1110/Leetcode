class Solution {
    public List<String> letterCombinations(String digits) {
        List<String> result = new ArrayList<>();
        if(digits.length() == 0){
            return result;
        }
        StringBuilder cur = new StringBuilder();
        Map<Character, List<Character>> map = new HashMap<>();
        map.put('2', Arrays.asList('a', 'b', 'c'));
        map.put('3', Arrays.asList('d', 'e', 'f'));
        map.put('4', Arrays.asList('g', 'h', 'i'));
        map.put('5', Arrays.asList('j', 'k', 'l'));
        map.put('6', Arrays.asList('m', 'n', 'o'));
        map.put('7', Arrays.asList('p', 'q', 'r', 's'));
        map.put('8', Arrays.asList('t', 'u', 'v'));
        map.put('9', Arrays.asList('w', 'x', 'y', 'z'));

        helper(cur, 0, result, digits, map);
        return result;
    }
    private void helper(StringBuilder cur, int startIndex, List<String> result, String digits, Map<Character, List<Character>> map){
        if(startIndex == digits.length()){
            result.add(cur.toString());
            return;
        }
        for(char i : map.get(digits.charAt(startIndex))){
            cur.append(i);
            helper(cur, (char)(startIndex + 1), result, digits, map);
            cur.deleteCharAt(cur.length() - 1);
        }
    }
}
