V1: O(n^2)
class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int l = 0;
        int r = numbers.length - 1;
        int[] result = new int[2];
        while(l < r){
            while(numbers[l] + numbers[r] > target && l < r){
                r--;
            }
            while(numbers[l] + numbers[r] < target && r < numbers.length - 1){
                r++;
            }
            if(numbers[l] + numbers[r] == target){
                result[0] = l + 1;
                result[1] = r + 1;
                return result;
            }
            l++;
        }
        return result;
     }
  }
  
  V2: Binary Search
  class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int[] result = new int[2];
        int start = 0;
        int end = numbers.length - 1;
        while(start < end){
            //再left + 1与closest之间找remian的二分法
            int remain = target - numbers[start];
            int l = start + 1;
            int r = end;
            while(l + 1 < r){
                int m = l + (r - l) / 2;
                if(numbers[m] < remain){
                    l = m;
                }else if(numbers[m] > remain){
                    r = m;
                }else{
                    result[0] = start + 1;
                    result[1] = m + 1;
                    return result;
                }
            }
            if(numbers[l] == remain){
                result[0] = start + 1;
                result[1] = l + 1;
            }
            if(numbers[r] == remain){
                result[0] = start + 1;
                result[1] = r + 1;
            }        
            start++;
        }
        return result;
    }
}
V3: Two Pointer
class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int left = 0;
        int right = numbers.length - 1;
        int[] result = new int[2];
        while(left < right){
            if(numbers[left] + numbers[right] > target){
                right --;
            }
            if(numbers[left] + numbers[right] < target){
                left++;
            }
            if(numbers[left] + numbers[right] == target){
                result[0] = left + 1;
                result[1] = right+ 1;
                return result;
            }
        }
        return result;
    }
}
