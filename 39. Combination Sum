class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> cur = new ArrayList<>();
        helper(cur, 0, 0, target, result, candidates);
        return result;
    }

    private void helper(List<Integer> cur, int startIndex, int sum, int target, List<List<Integer>> result, int[] candidates){
        //sum大于target，返回
        //sum等于target,加入result中并返回
        if(sum > target){
            return;
            //此时同层的之后的都不看了，直接返回上一层，因为candidates已经排序过了，同层之后的只会更大
        }
        if(sum == target){
            result.add(new ArrayList<>(cur));
            //不为addAll,因为只加了一个element，并且addAll其实是要加List<List<Integer>>而非List<Integer>
            //addAll作用于一个arraylist要一次性加好几个element
            return;
        }
        //i从start开始而不是从0开始！！
        for(int i = startIndex; i < candidates.length; i++){
            cur.add(candidates[i]);
            helper(cur, i, sum + candidates[i], target, result, candidates);
            cur.remove(cur.size() - 1);
            // List<Integer> next = new ArrayList<Integer>(cur);
            // next.add(candidates[i]);
            // helper(next, i, sum + candidates[i], target, result, candidates);
        }
    }
}
