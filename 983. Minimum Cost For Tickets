class Solution {
    public int mincostTickets(int[] days, int[] costs) {
        int n = days.length;
        int[] dp = new int[n + 1];
        for(int i = n - 1; i >= 0; i--){
            dp[i] = costs[0] + dp[binarySearch(days, i + 1, days[i] + 1)];
            dp[i] = Math.min(dp[i], costs[1] + dp[binarySearch(days, i + 1, days[i] + 7)]);
            dp[i] = Math.min(dp[i], costs[2] + dp[binarySearch(days, i + 1, days[i] + 30)]);
        }
        return dp[0];
    }
    private int binarySearch(int[] days, int start, int target){
        int l = start;
        int r = days.length - 1;
        //target越界的情况
        if(target > days[r]){return days.length;}
        while(l + 1 < r){
            int mid = (r - l) / 2 + l;
            if(days[mid] == target){
                return mid;
            }else if(days[mid] < target){
                l = mid;
            }else{
                r = mid;
            }
        }
        //edge case，当l,r一开始就相邻，不进while loop，此时target可能在l左边
        if(days[l] >= target){
            return l;
        }
        //在中间则返回大于target且离他最近的
        return r;
    }
}
