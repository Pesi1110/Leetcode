/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Result{
    TreeNode lca;
    int pq;
    Result(TreeNode lca, int pq){
        this.lca = lca;
        this.pq = pq;
    }
}
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        Result result = findLca(root, p, q);
        if(result.pq == 2){
            return result.lca;
        }
        return null;
    }
    private Result findLca(TreeNode root, TreeNode p, TreeNode q){
        if(root == null){
            return new Result(null, 0);
        }
        Result left = findLca(root.left, p, q);
        Result right = findLca(root.right, p, q);
        //碰到p, q的处理
        if(root == p || root == q){
            if(left.pq == 1 || right.pq == 1){
                return new Result(root, 2);
            }
            return new Result(root, 1);
        }
        //哪边为2回哪边
        if(left.pq == 2){
            return left;
        }
        if(right.pq == 2){
            return right;
        }
        //每边都有一个一
        if(left.pq == 1 && right.pq == 1){
            return new Result(root, 2);
        }
        //两边只有一个一
        if(left.pq == 1 && right.pq == 0){
            return left;
        }
        if(right.pq == 1 && left.pq == 0){
            return right;
        }
        //两边都没一
        return new Result(null, 0);
    }
}
