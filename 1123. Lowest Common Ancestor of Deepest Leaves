/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class lca{
    TreeNode node;
    int depth;
    lca(TreeNode node, int depth){
        this.node = node;
        this.depth = depth;
    }
}
class Solution {
    public TreeNode lcaDeepestLeaves(TreeNode root) {
        if(root == null){
            return null;
        }
        lca result = findLca(root);
        return result.node;
    }
    private lca findLca(TreeNode root){
        if(root == null){
            return new lca(null, 0);
        }
        lca left = findLca(root.left);
        lca right = findLca(root.right);
        if(left.depth == right.depth){
            return new lca(root, left.depth + 1);
        }
        if(left.depth > right.depth){
            left.depth++;
            return left;
        }
        if(left.depth < right.depth){
            right.depth++;
            return right;
        }
        return new lca(null, 0);
    }
}
