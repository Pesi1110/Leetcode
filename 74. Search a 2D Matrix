class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int rowStart = 0;
        int rowEnd = matrix.length - 1;
        while(rowStart + 1 < rowEnd){
            int rowMid = rowStart + (rowEnd - rowStart) / 2;
            if(matrix[rowMid][0] < target){
                rowStart = rowMid;
            }else if(matrix[rowMid][0] > target){
                rowEnd = rowMid;
            }else{
                return true;
            }
        }
        if(matrix[rowStart][0] == target || matrix[rowEnd][0] == target){
            return true;
        }
        if(matrix[rowStart][0] > target){
            return false;
        }else if(matrix[rowEnd][0] > target){
            return rowBinarySearch(rowStart, matrix, target);
        }else if(matrix[rowEnd][0] < target){
            return rowBinarySearch(rowEnd, matrix, target);
        }
        return false;
    }
    private boolean rowBinarySearch(int row, int[][] matrix, int target){
        int start = 0;
        int end = matrix[row].length - 1;
        while(start + 1 < end){
            int mid = start + (end - start) / 2;
            if(matrix[row][mid] < target){
                start = mid;
            }else if(matrix[row][mid] > target){
                end = mid;
            }else{return true;}
        }
        if(matrix[row][start] == target || matrix[row][end] == target){
            return true;
        }
        return false;
    }
}
