/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Result{
    boolean balanced;
    int depth;
    Result(boolean balanced, int depth){
        this.balanced = balanced;
        this.depth = depth;
    }
}
class Solution {
    public boolean isBalanced(TreeNode root) {
        return helper(root).balanced;
    }
    private Result helper(TreeNode root){
        if(root == null){
            return new Result(true, 0);
        }
        Result left = helper(root.left);
        Result right = helper(root.right);
        if(left.balanced == true && right.balanced == true){
            if(Math.abs(left.depth - right.depth) <= 1){
                return new Result(true, Math.max(left.depth, right.depth) + 1);
            }
        }
        return new Result(false, Math.max(left.depth, right.depth) + 1);
    }
}
