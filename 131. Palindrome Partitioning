class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> result = new ArrayList<>();
        List<String> cur = new ArrayList<>();
        helper(0, result, cur, s);
        return result;
    }
    private void helper(int begIndex, List<List<String>> result, List<String> cur, String s){
        if(begIndex == s.length()){
            result.add(new ArrayList<>(cur));
            return;
        }
        for(int i = begIndex + 1; i <= s.length(); i++){
            String sub = s.substring(begIndex, i);
            if(isPalindrome(sub)){
                cur.add(sub);
                helper(i, result, cur, s);
                cur.remove(cur.size() - 1);
            }else{continue;}
        }
    }
    private Boolean isPalindrome(String s){
        int i = 0;
        int j = s.length() - 1;
        while(i < j){
            if(s.charAt(i) != s.charAt(j)){
                return false;
            }
            i++;
            j--;
        }
        return true;
    }
}
