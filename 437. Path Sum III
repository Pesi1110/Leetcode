/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int count = 0;
    public int pathSum(TreeNode root, int targetSum) {
        if(root == null){
            return 0;
        }
        //用map做prefix sum的标准做法，因为要用到map，必然是要查找，所以map定义为每个sum出现的次数
        //记得要先加（0,1)，跟arraylist最前面加一项0是一个道理
        Map<Long, Integer> map = new HashMap<>();
        map.put(0L, 1);
        helper(root, map, targetSum, 0L);
        return count;
    }
    //分治的思想是自下而上，左右给root提供信息
    //dfs的思想是自上而下，root给左右提供信息。这题要用prefix sum所以自然要自上而下，所以必然需要backtrack把左边的信息去掉之后继续给右边用
    private void helper(TreeNode root, Map<Long, Integer> map, int targetSum, long sum){
        if(root == null){
            return;
        }
        long newSum = sum + root.val;
        if(map.containsKey(newSum - targetSum)){
            count = count + map.get(newSum - targetSum);
        }
        map.put(newSum, map.getOrDefault(newSum, 0) + 1);
        if(root.left != null){
            helper(root.left, map, targetSum, newSum);
            //之所以奇怪是因为DFS的时候都是直接remove list.size() - 1项
            map.put(newSum + root.left.val, map.get(newSum + root.left.val) - 1);
        }
        if(root.right != null){
            helper(root.right, map, targetSum, newSum);
            map.put(newSum + root.right.val, map.get(newSum + root.right.val) - 1);
        }
    }
}
