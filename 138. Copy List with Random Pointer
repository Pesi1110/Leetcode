/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    public Node copyRandomList(Node head) {
        if(head == null){
            return head;
        }
        //Add new node to the list
        Node node = head;
        while(node != null){
            Node newNode = new Node(node.val);
            Node temp = node.next;
            node.next = newNode;
            newNode.next = temp;
            node = temp;
        }
        //Copy random pointer
        node = head;
        while(node != null){
            Node temp = node.random;
            node = node.next;
            if(temp != null){
                node.random = temp.next;
            }else{
                node.random = null;
            }
            node = node.next;
        }
        //Seperate list
        node = head;
        Node newHead = node.next;
        while(node != null){
            Node copyNode = node.next;
            node.next = copyNode.next;
            if(copyNode.next != null){
                copyNode.next = copyNode.next.next;
                node = node.next;
            }else{
                copyNode.next = null;
                break;
            }     
        }
        return newHead;
    }
}
