class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        if(nums.length == 1){
            return Arrays.asList(nums[0]);
        }
        //dp[i]是以nums[i]为结尾的最大的divisible subset
        //x * y = z;
        //z * a = b;
        //b / x = z * a / x = x * y * a / x = a * y
        //所以要先排序，排序之后如果nums[i]能被nums[j]整除，则nums[i]能整除dp[j]里的所有元素
        List<List<Integer>> dp = new ArrayList<>();
        Arrays.sort(nums);
        for(int i = 0; i < nums.length; i++){
            List<Integer> list = new ArrayList<>();
            list.add(nums[i]);
            dp.add(list);
        }
        int maxSize = 0;
        int resultIndex = 0;
        for(int i = 1; i < nums.length; i++){
            int index = -1;
            int size = Integer.MIN_VALUE;
            for(int j = i - 1; j >= 0; j--){
                if(nums[i] % nums[j] == 0){
                    if(dp.get(j).size() > size){
                        index = j;
                        size = dp.get(j).size();
                    }
                }
            }
            if(index != -1){
                dp.get(i).addAll(dp.get(index));
                if(dp.get(i).size() > maxSize){
                    maxSize = dp.get(i).size();
                    resultIndex = i;
                }
            }
        }
        return dp.get(resultIndex);
        
    }
}
