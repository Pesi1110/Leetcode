easy做法：

class Solution {
    public int islandPerimeter(int[][] grid) {
        int perimeter = 0;
        int[] x = {1, 0, 0, -1};
        int[] y = {0, 1, -1, 0};
        for(int i = 0; i < grid.length; i++){
            for(int j = 0; j < grid[0].length; j++){
                if(grid[i][j] == 1){
                    for(int a = 0; a < 4; a++){
                        if(i + x[a] < grid.length && i + x[a] >= 0){
                            if(j + y[a] < grid[0].length && j + y[a] >= 0){
                                if(grid[i + x[a]][j + y[a]] == 0){
                                    perimeter++;
                                }
                            }else{
                                perimeter++;
                            }
                        }else{
                            perimeter++;
                        }
                    }
                }
            }
        }
        return perimeter;
    }
}

BFS:

class Coordinate{
    int row;
    int col;
    Coordinate(int row, int col){
        this.row = row;
        this.col = col;
    }
    @Override
    public int hashCode() {
        return Objects.hash(row, col);
    }
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Coordinate)) return false;
        Coordinate that = (Coordinate) o;
        return row == that.row && col == that.col;
    }

}
class Solution {
    public int islandPerimeter(int[][] grid) {
        int perimeter = 0;
        for(int i = 0; i < grid.length; i++){
            for(int j = 0; j < grid[0].length; j++){
                if(grid[i][j] == 1){
                    Coordinate land = new Coordinate(i, j);
                    perimeter = expandLand(land, grid);
                    break;
                }
            }
        }
        return perimeter;
    }
    private int expandLand(Coordinate land, int[][] grid){
        int[] x = {0, 1, -1, 0};
        int[] y = {1, 0, 0, -1};
        Set<Coordinate> visited = new HashSet<>();
        Queue<Coordinate> queue = new LinkedList<>();
        queue.offer(land);
        visited.add(land);
        int perimeter = 0;
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int j = 0; j < size; j++){
                Coordinate coor = queue.poll();
                int count = 0;
                for(int i = 0; i < 4; i++){
                    if(coor.row + x[i] < grid.length && coor.row + x[i] >= 0){
                        if(coor.col + y[i] < grid[0].length && coor.col + y[i] >= 0){
                            Coordinate cell = new Coordinate(coor.row + x[i], coor.col + y[i]);
                            if(grid[cell.row][cell.col] == 0){
                                count++;
                            }else{
                                if(!visited.contains(cell)){
                                    queue.offer(cell);
                                    visited.add(cell);
                                }
                            }
                        }else{
                            count++;
                        }
                    }else{
                        count++;
                    }
                }
                perimeter = perimeter + count;
            }
        }
        return perimeter;
        
    }
}
