class Solution {
    public int[] searchRange(int[] nums, int target) {
        //两种思路：1.先求first position,然后往后走，找last,有o(n)的风险
        //2.两次binary search,分别球first and last position
        int[] result = new int[2];
        if(nums.length == 0){
            result[0] = result[1] = -1;
            return result;           
        }
        int start = 0;
        int end = nums.length - 1;
        while(start + 1 < end){
            int mid = start + (end - start) / 2;
            if(nums[mid] < target){
                start = mid;
            }else{
                end = mid;
            }
        }
        if(nums[start] == target){
            result[0] = start;
        }else if(nums[end] == target){
            result[0] = end;
        }else{
            result[0] = -1;
        }
        
        int s = 0;
        int e = nums.length - 1;
        while(s + 1 < e){
            int m = s + (e - s) / 2;
            if(nums[m] <= target){
                s = m;
            }else{
                e = m;
            }
        }
        if(nums[e] == target){
            result[1] = e;
        }else if(nums[s] == target){
            result[1] = s;
        }else{
            result[1] = -1;
        }
        return result;
    }
}
