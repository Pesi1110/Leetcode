/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode prev = dummy;
        while(prev != null){
            prev = reverseNextKNodes(prev, k);
        }
        return dummy.next;
    }
    private ListNode reverseNextKNodes(ListNode head, int k){
        ListNode curt = head;
        ListNode n1 = head.next;
        //find kth and k+1 node
        for(int i = 0; i < k; i++){
            if(curt != null){
                curt = curt.next;
            }else{
                return null;
            }
        }
        if(curt == null){
            return null;
        }
        ListNode nk = curt;
        ListNode nkplus = curt.next;

        //reverse
        ListNode prev = head;
        curt = head.next;
        while(curt != nkplus){
            ListNode temp = curt.next;
            curt.next = prev;
            prev = curt;
            curt = temp;
        }
        head.next = nk;
        n1.next = nkplus;
        return n1;
    }
}
