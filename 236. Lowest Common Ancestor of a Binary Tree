/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        //出口是要么== null,要么==p or q,放在最前就是什么时候recursion暂停，返回什么；
        if(root == null){
            return null;
        }
        //走到p或者q就不用往下了，因为就算再往下有q或者p，也是返回p或者q，因为是lca！！！
        if(root == p || root == q){
            return root;
        }
        TreeNode left = lowestCommonAncestor(root.left, p, q);
        TreeNode right = lowestCommonAncestor(root.right, p, q);
        //放在后面就是left and right暂停了，返回左右值了以后在root这层做什么处理
        //先看root,然后再看left and right可以防止到了left and right有一个不为空时，还要比较root是否等于p或者q
        if(root == p || root == q){
            return root;
        }
        if(left != null && right != null){
            return root;
        }
        //此时q和p在同一个支线上
        if(left != null && right == null){
            return left;
        }
        if(left == null && right != null){
            return right;
        }
        //包括left and right都为null的状况
        return null;
    }
}
